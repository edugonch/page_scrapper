exit
visit scraped_pages_path
scraped_pages_path
exit
continue
a.text
continue
a.text
continue
a.text
continue
a.text
continue
a.text
continue
a.text
continue
a.text
continue
a.text
continue
a.text
a
exit
x.valid?
x.status_before_type_cast
x.status
x = ScrapedPage.new(url: "http://example.com", user: User.first)
x.status
x.status = 0
x.status
x.status = 0
x.status
ScrapedPage.validators_on(:status)
x.errors
x.valid?
x.status = 0
ScrapedPage.statuses
x.errors
x.valid?
x.status
x = ScrapedPage.new(url: "http://example.com", user: @user)
exit
ScrapedPage.statuses
ScrapedPage::status
ScrapedPage.status
x.errors
x.valid?
x.status = :pending
x.save!
x.errors
x.valid?
x.status
x = ScrapedPage.new(url: "http://example.com", user: @user)
continue
exit
x.errors
x.valid?
x.valid!
x.status
x = ScrapedPage.new(url: "http://example.com", user: @user)
exit
page.status
continue
page.status
continue
page.status
exit
page.status
continue
page.status
exit
page.status
continue
page.status
continue
page.status
page
page.status
continue
page.status
continue
assert_equal "pending", page.status
page.status
continue
exit
self.status
continue
self.status
continue
 page.status
continue
 page.status
continue
 page.status
continue
 page.status
 self.status
continue
 self.status
continue
page
page.status
continue
self.status
self.status ||= "pending"
self.status
